!function(o){var t=null,n=o.fn.css;o.fn.css=function(r,s){if(null===t&&(t=void 0!==o.cssProps?o.cssProps:void 0!==o.props?o.props:{}),void 0===t.transform&&("transform"==r||"object"==typeof r&&void 0!==r.transform)&&(t.transform=function(r){for(var s,o=["transform","WebkitTransform","msTransform","MozTransform","OTransform"];s=o.shift();)if(void 0!==r.style[s])return s;return"transform"}(this.get(0))),"transform"!=t.transform)if("transform"==r){if(r=t.transform,void 0===s&&jQuery.style)return jQuery.style(this.get(0),r)}else"object"==typeof r&&void 0!==r.transform&&(r[t.transform]=r.transform,delete r.transform);return n.apply(this,arguments)}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS1jc3MtdHJhbnNmb3JtLmpzIl0sIm5hbWVzIjpbIiQiLCJfcHJvcHNPYmoiLCJwcm94aWVkIiwiZm4iLCJjc3MiLCJhcmciLCJ2YWwiLCJjc3NQcm9wcyIsInByb3BzIiwiZWxlbWVudCIsInAiLCJwcm9wZXJ0aWVzIiwic2hpZnQiLCJzdHlsZSIsImdldFRyYW5zZm9ybVByb3BlcnR5IiwidGhpcyIsImdldCIsImpRdWVyeSIsImFwcGx5IiwiYXJndW1lbnRzIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFXQSxHQXdCUCxJQUFJQyxFQUFZLEtBRVpDLEVBQVVGLEVBQUVHLEdBQUdDLElBQ25CSixFQUFFRyxHQUFHQyxJQUFNLFNBQVVDLEVBQUtDLEdBb0R0QixHQWhEa0IsT0FBZEwsSUFJSUEsT0FGcUIsSUFBZEQsRUFBRU8sU0FFR1AsRUFBRU8sY0FFUyxJQUFYUCxFQUFFUSxNQUVGUixFQUFFUSxNQUlGLFNBYWlCLElBQTFCUCxFQUFxQixZQUdqQixhQUFQSSxHQUdrQixpQkFBUEEsUUFDdUIsSUFBcEJBLEVBQWUsYUFLakNKLEVBQXFCLFVBL0Q3QixTQUE4QlEsR0FPMUIsSUFGQSxJQUNJQyxFQURBQyxFQUFhLENBQUMsWUFBYSxrQkFBbUIsY0FBZSxlQUFnQixjQUUxRUQsRUFBSUMsRUFBV0MsU0FFbEIsUUFBK0IsSUFBcEJILEVBQVFJLE1BQU1ILEdBRXJCLE9BQU9BLEVBS2YsTUFBTyxZQStDc0JJLENBQXFCQyxLQUFLQyxJQUFJLEtBVzdCLGFBQTFCZixFQUFxQixVQUdyQixHQUFXLGFBQVBJLEdBU0EsR0FQQUEsRUFBTUosRUFBcUIsZUFPVCxJQUFQSyxHQUFzQlcsT0FBT0osTUFFcEMsT0FBT0ksT0FBT0osTUFBTUUsS0FBS0MsSUFBSSxHQUFJWCxPQU92QixpQkFBUEEsUUFDdUIsSUFBcEJBLEVBQWUsWUFHekJBLEVBQUlKLEVBQXFCLFdBQUtJLEVBQWUsaUJBQ3RDQSxFQUFlLFdBSTlCLE9BQU9ILEVBQVFnQixNQUFNSCxLQUFNSSxZQTdHbkMsQ0ErR0dGIiwiZmlsZSI6ImpxdWVyeS1jc3MtdHJhbnNmb3JtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgkKSB7XHJcbiAgICAvLyBNb25rZXkgcGF0Y2ggalF1ZXJ5IDEuMy4xKyBjc3MoKSBtZXRob2QgdG8gc3VwcG9ydCBDU1MgJ3RyYW5zZm9ybSdcclxuICAgIC8vIHByb3BlcnR5IHVuaWZvcm1seSBhY3Jvc3MgU2FmYXJpL0Nocm9tZS9XZWJraXQsIEZpcmVmb3ggMy41KywgSUUgOSssIGFuZCBPcGVyYSAxMSsuXHJcbiAgICAvLyAyMDA5LTIwMTEgWmFjaGFyeSBKb2huc29uIHd3dy56YWNoc3Ryb25hdXQuY29tXHJcbiAgICAvLyBVcGRhdGVkIDIwMTEuMDUuMDQgKE1heSB0aGUgZm91cnRoIGJlIHdpdGggeW91ISlcclxuICAgIGZ1bmN0aW9uIGdldFRyYW5zZm9ybVByb3BlcnR5KGVsZW1lbnQpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gVHJ5IHRyYW5zZm9ybSBmaXJzdCBmb3IgZm9yd2FyZCBjb21wYXRpYmlsaXR5XHJcbiAgICAgICAgLy8gSW4gc29tZSB2ZXJzaW9ucyBvZiBJRTksIGl0IGlzIGNyaXRpY2FsIGZvciBtc1RyYW5zZm9ybSB0byBiZSBpblxyXG4gICAgICAgIC8vIHRoaXMgbGlzdCBiZWZvcmUgTW96VHJhbmZvcm0uXHJcbiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSBbJ3RyYW5zZm9ybScsICdXZWJraXRUcmFuc2Zvcm0nLCAnbXNUcmFuc2Zvcm0nLCAnTW96VHJhbnNmb3JtJywgJ09UcmFuc2Zvcm0nXTtcclxuICAgICAgICB2YXIgcDtcclxuICAgICAgICB3aGlsZSAocCA9IHByb3BlcnRpZXMuc2hpZnQoKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZWxlbWVudC5zdHlsZVtwXSAhPSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gRGVmYXVsdCB0byB0cmFuc2Zvcm0gYWxzb1xyXG4gICAgICAgIHJldHVybiAndHJhbnNmb3JtJztcclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFyIF9wcm9wc09iaiA9IG51bGw7XHJcbiAgICBcclxuICAgIHZhciBwcm94aWVkID0gJC5mbi5jc3M7XHJcbiAgICAkLmZuLmNzcyA9IGZ1bmN0aW9uIChhcmcsIHZhbClcclxuICAgIHtcclxuICAgICAgICAvLyBUZW1wb3Jhcnkgc29sdXRpb24gZm9yIGN1cnJlbnQgMS42LnggaW5jb21wYXRpYmlsaXR5LCB3aGlsZVxyXG4gICAgICAgIC8vIHByZXNlcnZpbmcgMS4zLnggY29tcGF0aWJpbGl0eSwgdW50aWwgSSBjYW4gcmV3cml0ZSB1c2luZyBDU1MgSG9va3NcclxuICAgICAgICBpZiAoX3Byb3BzT2JqID09PSBudWxsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiAkLmNzc1Byb3BzICE9ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBfcHJvcHNPYmogPSAkLmNzc1Byb3BzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiAkLnByb3BzICE9ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBfcHJvcHNPYmogPSAkLnByb3BzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgX3Byb3BzT2JqID0ge31cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBGaW5kIHRoZSBjb3JyZWN0IGJyb3dzZXIgc3BlY2lmaWMgcHJvcGVydHkgYW5kIHNldHVwIHRoZSBtYXBwaW5nIHVzaW5nXHJcbiAgICAgICAgLy8gJC5wcm9wcyB3aGljaCBpcyB1c2VkIGludGVybmFsbHkgYnkgalF1ZXJ5LmF0dHIoKSB3aGVuIHNldHRpbmcgQ1NTXHJcbiAgICAgICAgLy8gcHJvcGVydGllcyB2aWEgZWl0aGVyIHRoZSBjc3MobmFtZSwgdmFsdWUpIG9yIGNzcyhwcm9wZXJ0aWVzKSBtZXRob2QuXHJcbiAgICAgICAgLy8gVGhlIHByb2JsZW0gd2l0aCBkb2luZyB0aGlzIG9uY2Ugb3V0c2lkZSBvZiBjc3MoKSBtZXRob2QgaXMgdGhhdCB5b3VcclxuICAgICAgICAvLyBuZWVkIGEgRE9NIG5vZGUgdG8gZmluZCB0aGUgcmlnaHQgQ1NTIHByb3BlcnR5LCBhbmQgdGhlcmUgaXMgc29tZSByaXNrXHJcbiAgICAgICAgLy8gdGhhdCBzb21lYm9keSB3b3VsZCBjYWxsIHRoZSBjc3MoKSBtZXRob2QgYmVmb3JlIGJvZHkgaGFzIGxvYWRlZCBvciBhbnlcclxuICAgICAgICAvLyBET00taXMtcmVhZHkgZXZlbnRzIGhhdmUgZmlyZWQuXHJcbiAgICAgICAgaWZcclxuICAgICAgICAoXHJcbiAgICAgICAgICAgIHR5cGVvZiBfcHJvcHNPYmpbJ3RyYW5zZm9ybSddID09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgICAgICYmXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIGFyZyA9PSAndHJhbnNmb3JtJ1xyXG4gICAgICAgICAgICAgICAgfHxcclxuICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnID09ICdvYmplY3QnXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIGFyZ1sndHJhbnNmb3JtJ10gIT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIF9wcm9wc09ialsndHJhbnNmb3JtJ10gPSBnZXRUcmFuc2Zvcm1Qcm9wZXJ0eSh0aGlzLmdldCgwKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFdlIGZvcmNlIHRoZSBwcm9wZXJ0eSBtYXBwaW5nIGhlcmUgYmVjYXVzZSBqUXVlcnkuYXR0cigpIGRvZXNcclxuICAgICAgICAvLyBwcm9wZXJ0eSBtYXBwaW5nIHdpdGggalF1ZXJ5LnByb3BzIHdoZW4gc2V0dGluZyBhIENTUyBwcm9wZXJ0eSxcclxuICAgICAgICAvLyBidXQgY3VyQ1NTKCkgZG9lcyAqbm90KiBkbyBwcm9wZXJ0eSBtYXBwaW5nIHdoZW4gKmdldHRpbmcqIGFcclxuICAgICAgICAvLyBDU1MgcHJvcGVydHkuICAoSXQgcHJvYmFibHkgc2hvdWxkIHNpbmNlIGl0IG1hbnVhbGx5IGRvZXMgaXRcclxuICAgICAgICAvLyBmb3IgJ2Zsb2F0JyBub3cgYW55d2F5Li4uIGJ1dCB0aGF0J2QgcmVxdWlyZSBtb3JlIHRlc3RpbmcuKVxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gQnV0LCBvbmx5IGRvIHRoZSBmb3JjZWQgbWFwcGluZyBpZiB0aGUgY29ycmVjdCBDU1MgcHJvcGVydHlcclxuICAgICAgICAvLyBpcyBub3QgJ3RyYW5zZm9ybScgYW5kIGlzIHNvbWV0aGluZyBlbHNlLlxyXG4gICAgICAgIGlmIChfcHJvcHNPYmpbJ3RyYW5zZm9ybSddICE9ICd0cmFuc2Zvcm0nKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gQ2FsbCBpbiBmb3JtIG9mIGNzcygndHJhbnNmb3JtJyAuLi4pXHJcbiAgICAgICAgICAgIGlmIChhcmcgPT0gJ3RyYW5zZm9ybScpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGFyZyA9IF9wcm9wc09ialsndHJhbnNmb3JtJ107XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFVzZXIgd2FudHMgdG8gR0VUIHRoZSB0cmFuc2Zvcm0gQ1NTLCBhbmQgaW4galF1ZXJ5IDEuNC4zXHJcbiAgICAgICAgICAgICAgICAvLyBjYWxscyB0byBjc3MoKSBmb3IgdHJhbnNmb3JtcyByZXR1cm4gYSBtYXRyaXggcmF0aGVyIHRoYW5cclxuICAgICAgICAgICAgICAgIC8vIHRoZSBhY3R1YWwgc3RyaW5nIHNwZWNpZmllZCBieSB0aGUgdXNlci4uLiBhdm9pZCB0aGF0XHJcbiAgICAgICAgICAgICAgICAvLyBiZWhhdmlvciBhbmQgcmV0dXJuIHRoZSBzdHJpbmcgYnkgY2FsbGluZyBqUXVlcnkuc3R5bGUoKVxyXG4gICAgICAgICAgICAgICAgLy8gZGlyZWN0bHlcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09ICd1bmRlZmluZWQnICYmIGpRdWVyeS5zdHlsZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4galF1ZXJ5LnN0eWxlKHRoaXMuZ2V0KDApLCBhcmcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDYWxsIGluIGZvcm0gb2YgY3NzKHsndHJhbnNmb3JtJzogLi4ufSlcclxuICAgICAgICAgICAgZWxzZSBpZlxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgYXJnID09ICdvYmplY3QnXHJcbiAgICAgICAgICAgICAgICAmJiB0eXBlb2YgYXJnWyd0cmFuc2Zvcm0nXSAhPSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGFyZ1tfcHJvcHNPYmpbJ3RyYW5zZm9ybSddXSA9IGFyZ1sndHJhbnNmb3JtJ107XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYXJnWyd0cmFuc2Zvcm0nXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gcHJveGllZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxufSkoalF1ZXJ5KTsiXX0=
