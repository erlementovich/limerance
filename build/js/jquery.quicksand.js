!function(i){"function"==typeof define&&define.amd?define(["jquery"],i):"object"==typeof module&&module.exports?module.exports=function(t,e){return void 0===e&&(e="undefined"!=typeof window?require("jquery"):require("jquery")(t)),i(e),e}:i(jQuery)}(function(A){var L=function(t){var e=t.clone(!0,!0),i=t.find("canvas");i.length&&e.find("canvas").each(function(t){this.getContext("2d").drawImage(i.get(t),0,0)});return e};A.fn.quicksand=function(q,t){var H,S={duration:750,easing:"swing",attribute:"data-id",adjustHeight:"call",adjustWidth:!1,useScaling:!1,enhancement:function(t){},selector:"> *",atomic:!1,dx:0,dy:0,maxWidth:0,retainExisting:!0};A.extend(S,t),void 0===A.transform&&(S.useScaling=!1),H="function"==typeof t?t:(arguments[2],arguments[2]);var N=this;return this.each(function(t){var n,f,r=[];f="function"==typeof S.attribute?A(q):L(A(q).filter("["+S.attribute+"]"));var e,i,l=A(this),s=A(this).css("height"),o=A(this).css("width"),h=!1,c=!1,a=A(l).offset(),p=[],d=A(this).find(S.selector),u=A(d).innerWidth();if(navigator.userAgent.match(/msie [6]/i))l.html("").append(f);else{var y=0,m=function(){if(A(this).css("margin","").css("position","").css("top","").css("left","").css("opacity",""),!y){if(y=1,!S.atomic){var s=l.find(S.selector);if(S.retainExisting){var a=A([]);w.find(S.selector).each(function(t){var e=A([]);if("function"==typeof S.attribute){var i=S.attribute(A(this));s.each(function(){if(S.attribute(this)==i)return e=A(this),!1})}else e=s.filter("["+S.attribute+'="'+A(this).attr(S.attribute)+'"]');0<e.length&&(a=a.add(e),0===t?l.prepend(e):e.insertAfter(l.find(S.selector).get(t-1)))}),s.not(a).remove()}else l.prepend(w.find(S.selector)),s.remove();h&&l.css("height",e),c&&l.css("width",o)}S.enhancement(l),"function"==typeof H&&H.call(N)}"auto"===S.adjustHeight&&l.css("height","auto"),"auto"===S.adjustWidth&&l.css("width","auto")},g=l.offsetParent(),b=g.offset();"relative"==g.css("position")?"body"!=g.get(0).nodeName.toLowerCase()&&(b.top+=parseFloat(g.css("border-top-width"))||0,b.left+=parseFloat(g.css("border-left-width"))||0):(b.top-=parseFloat(g.css("border-top-width"))||0,b.left-=parseFloat(g.css("border-left-width"))||0,b.top-=parseFloat(g.css("margin-top"))||0,b.left-=parseFloat(g.css("margin-left"))||0),isNaN(b.left)&&(b.left=0),isNaN(b.top)&&(b.top=0),b.left-=S.dx,b.top-=S.dy,!1!==S.adjustHeight&&l.css("height",A(this).height()),!1!==S.adjustWidth&&l.css("width",A(this).width()),d.each(function(t){p[t]=A(this).offset()}),A(this).stop();var v=0,x=0;d.each(function(t){A(this).stop();var e=A(this).get(0);x="absolute"==e.style.position?(v=-S.dx,-S.dy):(v=S.dx,S.dy),e.style.position="absolute",e.style.margin="0",S.adjustWidth||(e.style.width=u+"px"),e.style.top=p[t].top-parseFloat(e.style.marginTop)-b.top+x+"px",e.style.left=p[t].left-parseFloat(e.style.marginLeft)-b.left+v+"px",0<S.maxWidth&&p[t].left>S.maxWidth&&(e.style.display="none")});var w=L(A(l)),j=w.get(0);if(j.innerHTML="",j.setAttribute("id",""),j.style.height="auto",j.style.width=l.width()+"px",w.append(f),w.insertBefore(l),w.css("opacity",0),j.style.zIndex=-1,j.style.margin="0",j.style.position="absolute",j.style.top=a.top-b.top+"px",j.style.left=a.left-b.left+"px","dynamic"===S.adjustHeight?l.animate({height:w.height()},S.duration,S.easing):"call"===S.adjustHeight&&(e=w.height(),parseFloat(s)<parseFloat(e)?l.css("height",e):h=!0),"dynamic"===S.adjustWidth?l.animate({width:w.width()},S.duration,S.easing):"call"===S.adjustWidth&&(i=w.width(),parseFloat(o)<parseFloat(i)?l.css("width",i):c=!0),d.each(function(t){var e=[];"function"==typeof S.attribute?(n=S.attribute(A(this)),f.each(function(){if(S.attribute(this)==n)return e=A(this),!1})):e=f.filter("["+S.attribute+'="'+A(this).attr(S.attribute)+'"]'),e.length?S.useScaling?r.push({element:A(this),dest:e,style:{top:A(this).offset().top,left:A(this).offset().left,opacity:""},animation:{top:e.offset().top-b.top,left:e.offset().left-b.left,opacity:1,transform:"scale(1.0)"}}):r.push({element:A(this),dest:e,style:{top:A(this).offset().top,left:A(this).offset().left,opacity:""},animation:{top:e.offset().top-b.top,left:e.offset().left-b.left,opacity:1}}):S.useScaling?r.push({element:A(this),style:{top:A(this).offset().top,left:A(this).offset().left,opacity:""},animation:{opacity:"0.0",transform:"scale(0.0)"}}):r.push({element:A(this),style:{top:A(this).offset().top,left:A(this).offset().left,opacity:""},animation:{opacity:"0.0"}})}),f.each(function(t){var e,i=[],s=[];if("function"==typeof S.attribute?(n=S.attribute(A(this)),d.each(function(){if(S.attribute(this)==n)return i=A(this),!1}),f.each(function(){if(S.attribute(this)==n)return s=A(this),!1})):(i=d.filter("["+S.attribute+'="'+A(this).attr(S.attribute)+'"]'),s=f.filter("["+S.attribute+'="'+A(this).attr(S.attribute)+'"]')),0===i.length&&0<s.length){e=S.useScaling?{opacity:"1.0",transform:"scale(1.0)"}:{opacity:"1.0"};var a=L(s),o=a.get(0);o.style.position="absolute",o.style.margin="0",S.adjustWidth||(o.style.width=u+"px"),o.style.top=s.offset().top-b.top+"px",o.style.left=s.offset().left-b.left+"px",a.css("opacity",0),S.useScaling&&a.css("transform","scale(0.0)"),a.appendTo(l),(0===S.maxWidth||s.offset().left<S.maxWidth)&&r.push({element:A(a),dest:s,animation:e})}}),w.remove(),S.atomic){for($toDelete=l.find(S.selector),l.prepend(w.find(S.selector)),t=0;t<r.length;t++)if(r[t].dest&&r[t].style){var W=r[t].dest,F=W.offset();W.css({position:"relative",top:r[t].style.top-F.top,left:r[t].style.left-F.left}),W.animate({top:"0",left:"0"},S.duration,S.easing,m)}else r[t].element.animate(r[t].animation,S.duration,S.easing,m);$toDelete.remove()}else for(S.enhancement(l),t=0;t<r.length;t++)r[t].element.animate(r[t].animation,S.duration,S.easing,m)}})}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
